#lang racket

#|Let us consider trees memorized in Scheme as hierarchical lists (e.g. numeric expressions like (+ 2 3 (- 4 5)
(/ 3 2))).|#

#|1. Define a short, purely functional version of procedure numnodes, that accepts a tree and returns its
number of nodes (e.g. (numnodes '(+ 2 3 (/ 1 3) (- 2 2 4 -7)))) should return 11).|#

(define (numnodes tree)
  (

#|2. Define a lower-level, efficient, purely iterative version of numnodes.|#



#|3. Comment the following code, giving meaningful names to capitalized elements (i.e. H1 V1 ...). Also,
please show a meaningful example usage.
(define (H1 H2)
 (call/cc
  (lambda (V1)
    (for-each (lambda (x)
                (call/cc
                 (lambda (V2)
                   (V1 (cons x V2)))))
              H2)
    'V3)))|#